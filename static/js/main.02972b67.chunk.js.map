{"version":3,"sources":["components/Header.js","components/GameBoardRow.js","components/GameBoardSquare.js","components/PlayAgainButton.js","components/ScoreBoard.js","components/GameBoard.js","components/GameBoardContainer.js","actions/index.js","App.js","serviceWorker.js","reducers/gameBoard.js","reducers/players.js","reducers/index.js","index.js"],"names":["Header","react_default","a","createElement","className","GameBoardRow","_ref","squares","GameBoardSquare","claimSquare","currentPlayer","owner","winner","onClick","character","PlayAgainButton","resetAll","ScoreBoard","scoreBoard","X","O","GameBoard","grid","playerIndex","playerDetails","draw","rows","playAgain","components_PlayAgainButton","winnerMessage","playerMessage","forEach","row","rowIndex","column","colIndex","coordinates","push","components_GameBoardSquare","key","length","components_GameBoardRow","components_ScoreBoard","connect","state","gridSize","gameBoard","players","collection","dispatch","type","payload","player","updateGrid","App","components_Header","GameBoardContainer","Component","Boolean","window","location","hostname","match","defaultState","initialized","ownedSquares","generateGrid","concat","arguments","undefined","action","actions","RESET_ALL","Object","assign","UPDATE_GRID","_action$payload","CLAIM_SQUARE","tally","filter","square","checkHorizontal","forwardHits","reverseHits","forward","find","reverse","checkDiagonal","checkVertical","TOGGLE_TURN","map","combineReducers","store","createStore","rootReducer","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02972b67.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n    <div className=\"Header\">\n        <h2>Tic-Tac-Toe</h2>\n    </div>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GameBoardRow = ({ squares }) => (\n    <div className=\"GameBoardRow\">{squares}</div>\n);\n\nGameBoardRow.propTypes = {\n    squares: PropTypes.array.isRequired\n};\n\nexport default GameBoardRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GameBoardSquare = ({ claimSquare, currentPlayer, owner, winner }) => (\n    <div className={\n        'GameBoardSquare' +\n        (winner ? ' NoHover' : '') +\n        (owner ? ' GameBoardSquare__owned' : '')\n    }\n        onClick={(owner || winner) ? null : claimSquare}\n    >{(owner ? owner.character : currentPlayer.character)}</div>\n);\n\nGameBoardSquare.propTypes = {\n    claimSquare: PropTypes.func.isRequired,\n    currentPlayer: PropTypes.object.isRequired,\n    owner: PropTypes.object\n};\n\nexport default GameBoardSquare;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PlayAgainButton = ({ resetAll }) => (\n    <button className=\"PlayAgainButton\" onClick={resetAll}>Play again?</button>\n);\n\nPlayAgainButton.propTypes = {\n    resetAll: PropTypes.func.isRequired\n};\n\nexport default PlayAgainButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ScoreBoard = ({ scoreBoard }) => (\n    <div className=\"ScoreBoard\">\n        <h3>Scoreboard</h3>\n        <div>X: {scoreBoard.X}</div>\n        <div>O: {scoreBoard.O}</div>\n    </div>\n);\n\nScoreBoard.propTypes = {\n    scoreBoard: PropTypes.object.isRequired\n};\n\nexport default ScoreBoard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GameBoardRow from './GameBoardRow';\nimport GameBoardSquare from './GameBoardSquare';\nimport PlayAgainButton from './PlayAgainButton';\nimport ScoreBoard from './ScoreBoard';\n\nconst GameBoard = ({\n    grid,\n    scoreBoard,\n    claimSquare,\n    resetAll,\n    playerIndex,\n    playerDetails,\n    winner,\n    draw\n}) => {\n    const rows = [];\n    const playAgain = (winner || draw) ? <PlayAgainButton resetAll={() => { resetAll() }} /> : '';\n    const winnerMessage = ((winner && !draw) ? ' Wins!' : '\\'s Turn');\n    const playerMessage = playerDetails.character + winnerMessage;\n    const drawMessage = 'Draw!';\n\n    // construct the grid from state\n    grid.forEach((row, rowIndex) => {\n        const squares = [];\n\n        // build game board columns from state\n        row.forEach((column, colIndex) => {\n            const coordinates = { rowIndex, colIndex };\n\n            squares.push(<GameBoardSquare\n                key={colIndex}\n                currentPlayer={playerDetails}\n                claimSquare={() => { claimSquare(coordinates, playerIndex, playerDetails, grid.length) }}\n                owner={column.owner}\n                winner={winner}\n            />);\n        });\n\n        rows.push(<GameBoardRow key={rowIndex} squares={squares} />);\n    });\n\n    return (\n        <div className=\"GameBoard\">\n            <div className=\"InfoBar\">\n                {(draw && !winner) ? drawMessage : playerMessage}\n                {playAgain}\n            </div>\n            {rows}\n            <ScoreBoard scoreBoard={scoreBoard} />\n        </div>\n    );\n};\n\nGameBoard.propTypes = {\n    grid: PropTypes.array.isRequired,\n    claimSquare: PropTypes.func.isRequired,\n    resetAll: PropTypes.func.isRequired,\n    playerIndex: PropTypes.number.isRequired,\n    playerDetails: PropTypes.object.isRequired,\n    winner: PropTypes.bool.isRequired\n};\n\nexport default GameBoard;\n","import { connect } from 'react-redux';\nimport { toggleTurn, claimSquare, updateGrid, resetAll } from '../actions';\n\nimport GameBoard from './GameBoard';\n\nconst mapStateToProps = state => ({\n    gridSize: state.gameBoard.gridSize,\n    grid: state.gameBoard.grid,\n    scoreBoard: state.players.scoreBoard,\n    playerIndex: state.players.currentPlayer,\n    playerDetails: state.players.collection[state.players.currentPlayer],\n    winner: state.players.winner,\n    draw: state.gameBoard.draw\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    claimSquare: (coordinates, playerIndex, playerDetails, gridSize) => {\n        dispatch(claimSquare(coordinates, playerIndex, gridSize));\n        dispatch(updateGrid(coordinates, playerDetails));\n        dispatch(toggleTurn(playerIndex));\n    },\n    resetAll: () => {\n        dispatch(resetAll());\n    }\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(GameBoard);\n","export const claimSquare = (coordinates, currentPlayer, gridSize) => ({\n    type: 'CLAIM_SQUARE',\n    payload: {\n        coordinates,\n        currentPlayer,\n        gridSize\n    }\n});\n\nexport const toggleTurn = (currentPlayer) => ({\n    type: 'TOGGLE_TURN',\n    payload: {\n        currentPlayer\n    }\n});\n\nexport const updateGrid = (coordinates, player) => ({\n    type: 'UPDATE_GRID',\n    payload: {\n        coordinates,\n        player\n    }\n});\n\nexport const resetAll = () => ({\n    type: 'RESET_ALL'\n});\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport GameBoardContainer from './components/GameBoardContainer';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <GameBoardContainer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultState = {\n    gridSize: 3,\n    initialized: false,\n    ownedSquares: 0,\n    draw: false\n};\n\nconst gameBoard = (state = defaultState, action) => {\n    const actions = {\n        RESET_ALL: () => {\n            state.grid = generateGrid(state.gridSize);\n            state.ownedSquares = 0;\n            state.draw = false;\n            return Object.assign({}, state);\n        },\n        UPDATE_GRID: (action) => {\n            const { coordinates, player } = action.payload;\n            const { rowIndex, colIndex } = coordinates;\n\n            state.grid[rowIndex][colIndex].owner = player;\n\n            state.ownedSquares++;\n            state.draw = (state.ownedSquares === (state.gridSize * state.gridSize));\n            return Object.assign({}, state);\n        }\n    };\n\n    if (actions[action.type]) {\n        return actions[action.type](action);\n    } else {\n        if (!state.initialized) {\n            state.grid = generateGrid(state.gridSize);\n            state.initialized = true;\n        }\n        return state;\n    }\n};\n\nfunction generateGrid(gridSize) {\n    const rows = [];\n    // build game board rows\n    for (let rowIndex = 0; rowIndex < gridSize; rowIndex++) {\n        const squares = [];\n        // build game board columns\n        for (let colIndex = 0; colIndex < gridSize; colIndex++) {\n            squares.push({\n                key: `${rowIndex}-${colIndex}`,\n                owner: null,\n                rowIndex,\n                colIndex\n            });\n        }\n        rows.push(squares);\n    }\n    return rows;\n}\n\nexport default gameBoard;\n","const defaultState = {\n    collection: [\n        {\n            character: 'X',\n            ownedSquares: []\n        },\n        {\n            character: 'O',\n            ownedSquares: []\n        }\n    ],\n    currentPlayer: 0,\n    winner: false,\n    scoreBoard: {\n        X: 0,\n        O: 0\n    }\n};\n\nconst checkHorizontal = (ownedSquares, gridSize) => {\n    let winner = false;\n    let rowIndex = 0;\n\n    do {\n        const rowColumns = ownedSquares.filter(square => square.rowIndex === rowIndex);\n\n        winner = (rowColumns.length === gridSize);\n        rowIndex++;\n    } while (!winner && rowIndex < gridSize);\n\n    return winner;\n};\n\nconst checkDiagonal = (ownedSquares, gridSize) => {\n    const forwardHits = [];\n    const reverseHits = [];\n    let winner = false;\n    let rowIndex = 0;\n    let colIndex = (gridSize - 1);\n\n    do {\n        // search from top left to bottom right\n        const forward = ownedSquares.find(square => square.rowIndex === rowIndex && square.colIndex === rowIndex);\n        // search from bottom left to top right\n        const reverse = ownedSquares.find(square => square.rowIndex === colIndex && square.colIndex === rowIndex);\n\n        if (forward) forwardHits.push(forward);\n        if (reverse) reverseHits.push(reverse);\n\n        winner = ((forwardHits.length === gridSize) || (reverseHits.length === gridSize));\n\n        rowIndex++;\n        colIndex--;\n    } while (!winner && rowIndex < gridSize);\n\n    return winner;\n};\n\nconst checkVertical = (ownedSquares, gridSize) => {\n    let winner = false;\n    let colIndex = 0;\n\n    do {\n        const columnRows = ownedSquares.filter(square => square.colIndex === colIndex);\n\n        winner = (columnRows.length === gridSize);\n        colIndex++;\n    } while (!winner && colIndex < gridSize);\n\n    return winner;\n};\n\nconst players = (state = defaultState, action) => {\n    const actions = {\n        CLAIM_SQUARE: (action) => {\n            const currentPlayer = action.payload.currentPlayer;\n            const gridSize = action.payload.gridSize;\n            const ownedSquares = state.collection[currentPlayer].ownedSquares;\n            let tally = state.scoreBoard[state.collection[currentPlayer].character];\n\n            state.collection[currentPlayer].ownedSquares.push(\n                action.payload.coordinates\n            );\n\n            state.winner = (\n                checkHorizontal(ownedSquares, gridSize) ||\n                checkDiagonal(ownedSquares, gridSize) ||\n                checkVertical(ownedSquares, gridSize)\n            );\n\n            if (state.winner) {\n                state.scoreBoard[state.collection[currentPlayer].character] = tally + 1;\n            }\n\n            return Object.assign({}, state);\n        },\n        TOGGLE_TURN: (action) => {\n            if (!state.winner) {\n                state.currentPlayer = action.payload.currentPlayer ? 0 : 1;\n            }\n            return Object.assign({}, state);\n        },\n        RESET_ALL: () => {\n            state.winner = false;\n            state.currentPlayer = state.currentPlayer ? 0 : 1;\n            state.collection = state.collection.map(player => {\n                player.ownedSquares = [];\n                return player;\n            })\n            return Object.assign({}, state);\n        }\n    };\n\n    return actions[action.type] ? actions[action.type](action) : state;\n};\n\nexport default players;\n","import { combineReducers } from 'redux';\nimport gameBoard from './gameBoard';\nimport players from './players';\n\nexport default combineReducers({\n    gameBoard,\n    players\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}